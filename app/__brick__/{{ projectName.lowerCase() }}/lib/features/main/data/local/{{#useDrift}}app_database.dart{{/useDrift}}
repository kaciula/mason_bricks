import 'package:{{ projectName.snakeCase() }}/features/common/ui/generic/utils/string_extension.dart';
import 'package:{{ projectName.snakeCase() }}/services/generic/file_storage_service.dart';
import 'package:drift/drift.dart';
import 'package:drift_flutter/drift_flutter.dart';
import 'package:logging/logging.dart';
import 'package:path/path.dart' as path;

part 'app_database.g.dart';

@DriftDatabase(
  tables: [],
)
class AppDatabase extends _$AppDatabase {
  AppDatabase(FileStorageService fileStorageService)
      : super(_openConnection(fileStorageService));

  @override
  int get schemaVersion => 1;

  @override
  MigrationStrategy get migration {
    return MigrationStrategy();
  }

  // ignore: unused_element
  Future<void> _safeAddColumn(Migrator m, TableInfo<Table, dynamic> table,
      GeneratedColumn<Object> column) async {
    try {
      await m.addColumn(table, column);
    } catch (e) {
      // There seems to be a situation where the migration is called twice so we want to be able to safely continue if the column was already added.
      if (e is Exception &&
          e.toString().containsIgnoreCase('duplicate column name')) {
        _logger.warning('Failed to add column', e);
      } else {
        rethrow;
      }
    }
  }

  static QueryExecutor _openConnection(FileStorageService fileStorageService) {
    final String name = '{{ projectName.snakeCase() }}';
    return driftDatabase(
      name: name,
      native: DriftNativeOptions(
        databasePath: () async =>
            path.join(fileStorageService.appDocumentsDir.path, '$name.sqlite'),
      ),
    );
  }

  Future<void> reset() async {}
}

// ignore: unused_element
final Logger _logger = Logger('AppDatabase');
